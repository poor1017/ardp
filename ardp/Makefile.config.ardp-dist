## Configuration file for ARDP library.
## Version Control Header: $Header: /nfs/gost/CVSroot/prospero/lib/ardp/Makefile.config.ardp-dist,v 1.19 1998/07/15 22:56:31 swa Exp $
## Last Updated Time-stamp: <98/07/09 20:16:20 swa>

#######################################################################
## I) Machine and Operating-System dependent options.  Check these.    #
## The defaults are correct for SunOS.                                 #
#######################################################################

### P_MACHINE_TYPE and P_OS_TYPE
### These define the processor that you are using.
### This facility eliminates the need in versions of Prospero before 5/23/94 
### to edit the <pmachine.h> file.
### 

##  Machine types - Supported values
## 
##    VAX, SUN, HP9000_S300, HP9000_S700, IBM_RTPC, ENCORE_NS32K,
##    ENCORE_S93, ENCORE_S91, APOLLO, IBM_RS6000, INTELX86
##  
##    MIPS_BE - MIPS Chip (Big Endian Byte Order)
##    MIPS_LE - MIPS Chip (Little Endian Byte Order)
## 
##  Add others as needed.  
## 
##  Files that check these definitions:
##    include/pmachine.h
##  GOSTLIB doesn't use pmachine.h
##  ARDP does use PMACHINE.H
##  

P_MACHINE_TYPE = SUN

##  Operating system - Supported values
##  
##  LINUX, ULTRIX, BSD43, SUNOS (version 4), SUNOS_V3 (SunOS version 3), HPUX, SYSV,
##  MACH, DOMAINOS, AIX, SOLARIS (a.k.a. SunOS version 5), SCOUNIX
## 
##  Add others as needed.  
## 
##  Files that check these defintions:
##    include/pmachine.h, lib/pcompat/opendir.c, lib/pcompat/readdir.c
##
P_OS_TYPE = SUNOS


##
## LIBS
##
## Special libraries needed by some operating systems.
##
##

## LIBS is normally unset.  You can leave this out if you want, though.
#LIBS=
## SCOUNIX: Need -lsocket, -lcrypt_i
# LIBS = -lsocket -lcrypt_i -lm
## SOLARIS: Need -lsocket -lnsl
# LIBS = -lsocket -lnsl
## If profiling (-pg) under Solaris, also need
# LIBS += -ldl
## Under SunOS, LINUX no libraries are necessary.
## I have found at ISI, however, that adding -lresolv under SunOS is helpful 
## and eliminates some name resolution problems. --swa, 8/97
# LIBS=-lresolv

## Using GNU Malloc speeds up Prospero about a factor of 1.3.
## WARNING: GNU Malloc (at least as we have it compiled at ISI) is not 
## thread-safe. 
## This path is appropriate for ISI, but not for other installations.
#LIBS += /nfs/gost/external/solaris/lib/gmalloc.O2.o

## There are usually not dependencies, unless you think the libraries 
## you're using might change under you.

LIBS_DEPENDENCIES=

###
### Compilation flags
###


#### KERBEROS version 5

## Use the following definitions if you want Kerberos Version 5
## authentication in the Prospero directory server, or if you are using the
## new ARDP v1 security context.
##
## The location of the Kerberos version 5 libraries and include files will vary
## from machine to machine.
##
## We don't enable the Kerberos libraries and include files by default because:
## (1) Searching the huge Kerberos libraries substantially slows down the
## linker.
## (2) Many sites do not have Kerberos installed

### Use the following definitions if you don't want Kerberos.
K_INC    =
KRB_LIBS =
KRB_LIBS_DEPENDENCIES =
CFLAGS += -DARDP_NO_KERBEROS

### These are the definitions for Kerberos, Version 5,

## Edit ardp_sec_config.h to set the default Kerberos service name and 
## keytab file location.  These are also dynamically configurable
## as the resources "ardp.kerberos_srvtab" and "ardp.server_principal_name".


## The samples represent the installation at ISI as of 2/98.

### Set the root of the Kerberos installation here.  This variable is only
### used to set K_INC, KRB_LIBS and KRB_LIBS_DEPENDENCIES below.

## These are the choices if you're at ISI:

# KERBEROS_ROOT = /nfs/gost/kerberos/sun4
# KERBEROS_ROOT = /nfs/gost/kerberos/solaris

# K_INC = -I$(KERBEROS_ROOT)/include ## 

## You should not need this for Kerberos Version 5 release 1, but 
## probably will if you're running the pre-release Kerberos version 5 beta 6:
# K_INC += -I$(KERBEROS_ROOT)/include/krb5

### KRB_LIBS
# KRB_LIBS = $(KERBEROS_ROOT)/lib/libkrb5.a $(KERBEROS_ROOT)/lib/libcrypto.a $(KERBEROS_ROOT)/lib/libcom_err.a
### Or, more simply:
# KRB_LIBS = -L$(KERBEROS_ROOT)/lib -lkrb5 -lcrypto -lcom_err
## You only need to set the dependencies if your Kerberos libraries 
## are subject to change.  This was the case at ISI when there was ongoing
## Kerberos development here.
# KRB_LIBS_DEPENDENCIES=$(KRB_LIBS)
## Be sure to Turn off the ARDP_NO_KERBEROS flag defined above.  Either 
## remember to turn it off above or enable this line here: 
# CFLAGS += -UARDP_NO_KERBEROS

###
### IGNORE EVERYTHING BELOW THIS LINE; THESE FLAGS ARE ALMOST OBSOLETE
###

### ARDP_NO_SECURITY_CONTEXT
##
## Ignore this flag if you are building ARDP as part of Prospero.
##
## This flag should be turned on if you want a stripped-down version of 
## ARDP without the security context.  
## This might be the case if you want to use ARDP for special applications.
# CFLAGS += -DARDP_NO_SECURITY_CONTEXT

### ARDP_STANDALONE
##
## Ignore this flag if you are building ARDP as part of Prospero.
##
## define ARDP_STANDALONE if you don't want ARDP to depend upon any
## lower-level GOST or DIVIRS functions.
## This means that the automatic configuration routines (PCONFIG) will
## be turned off.  Your program can still set the ardp_config structure, 
## however.
## The current implementation of the ARDP_STANDALONE compilation flag is 
## such that it will not work if you want to use the PFS_THREADS routines; 
## there are some minor support routines and include files in GOSTLIB.
## If ARDP_STANDALONE is defined, you do not need to call ardp_initialize().
## It is still good practice to do so.
##
## In short, if you are writing your program from scratch, you should
## not worry about the ARDP_STANDALONE flag; just leave it unset.  Its
## main purpose is to avoid name conflicts between gostlib and the
## NetCheque package, which was written using an older version of the
## functions that became GOSTLIB.
##
# CFLAGS +=-DARDP_STANDALONE

##############################################
### DEVELOPMENT/DEBUGGING/TESTING FLAGS: #####
##############################################

##
## PURIFY
## These flags are used for the PURIFY system (product of Rational software)
## If you decide to add some Purify-specific stuff to gostlib,
## then these flags will need to be used.
#PURIFY_HOME="`purify -printhomedir`"
#CFLAGS += -DPURIFY	# To turn on Purify capability.  
## If purify-capable, must also link with stubs, then.  This
#LIBS += $(PURIFY_HOME)/purify_stubs.a
## Need the include directory so that we can #include <purify.h>
## This odd-looking format for CFLAGS protects us against leaving the 
## PURIFY_HOMEvariable unset.
#CFLAGS +=  -I"$(PURIFY_HOME)"/.



## If using the NetChequeCash payment system in the security context, you will
## need to know where the NetChequeCash include files and libraries are.
## Currently (8/97), the ARDP security context does not support NetChequeCash.
# NCC_INCS=-I/malta/netcheque.6/NetChequeCash/include  -I/malta/netcheque.6/NetChequeCash/include/acc_inf 


## We sometimes enable these flags when running experiments during development.
## Note that Make is not bright enough to recompile appropriately when
## these change, even though it should clue in; be sure to do a 'make clean' 
## in this directory if you change one of these.

# CFLAGS += -DARDP_PURE_V1_SERVER # won't be able to fall back to v0
# CFLAGS += -DARDP_PURE_V0_SERVER # won't fall forward to v1
# CFLAGS += -DARDP_PURE_V0_CLIENT # won't fall-forward to v1  
# CFLAGS += -DARDP_PURE_V1_CLIENT  # won't be able to fall back to v0
# CFLAGS += -DARDP_SEND_VERSION_INDEPENDENT_BAD_VERSION_ONLY

## IF you move GOSTLIB around, change this.
GOSTLIB_DIRECTORY=../gostlib/
